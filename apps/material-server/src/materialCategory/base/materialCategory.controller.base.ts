/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaterialCategoryService } from "../materialCategory.service";
import { MaterialCategoryCreateInput } from "./MaterialCategoryCreateInput";
import { MaterialCategory } from "./MaterialCategory";
import { MaterialCategoryFindManyArgs } from "./MaterialCategoryFindManyArgs";
import { MaterialCategoryWhereUniqueInput } from "./MaterialCategoryWhereUniqueInput";
import { MaterialCategoryUpdateInput } from "./MaterialCategoryUpdateInput";

export class MaterialCategoryControllerBase {
  constructor(protected readonly service: MaterialCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaterialCategory })
  async createMaterialCategory(
    @common.Body() data: MaterialCategoryCreateInput
  ): Promise<MaterialCategory> {
    return await this.service.createMaterialCategory({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaterialCategory] })
  @ApiNestedQuery(MaterialCategoryFindManyArgs)
  async materialCategories(
    @common.Req() request: Request
  ): Promise<MaterialCategory[]> {
    const args = plainToClass(MaterialCategoryFindManyArgs, request.query);
    return this.service.materialCategories({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaterialCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async materialCategory(
    @common.Param() params: MaterialCategoryWhereUniqueInput
  ): Promise<MaterialCategory | null> {
    const result = await this.service.materialCategory({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaterialCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaterialCategory(
    @common.Param() params: MaterialCategoryWhereUniqueInput,
    @common.Body() data: MaterialCategoryUpdateInput
  ): Promise<MaterialCategory | null> {
    try {
      return await this.service.updateMaterialCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaterialCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaterialCategory(
    @common.Param() params: MaterialCategoryWhereUniqueInput
  ): Promise<MaterialCategory | null> {
    try {
      return await this.service.deleteMaterialCategory({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
